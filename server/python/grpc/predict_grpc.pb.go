// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: predict.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Predictor_Predict_FullMethodName    = "/predict.Predictor/Predict"
	Predictor_PredictAll_FullMethodName = "/predict.Predictor/PredictAll"
)

// PredictorClient is the client API for Predictor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PredictorClient interface {
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error)
	PredictAll(ctx context.Context, in *PredictAllRequest, opts ...grpc.CallOption) (*PredictAllResponse, error)
}

type predictorClient struct {
	cc grpc.ClientConnInterface
}

func NewPredictorClient(cc grpc.ClientConnInterface) PredictorClient {
	return &predictorClient{cc}
}

func (c *predictorClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredictResponse)
	err := c.cc.Invoke(ctx, Predictor_Predict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictorClient) PredictAll(ctx context.Context, in *PredictAllRequest, opts ...grpc.CallOption) (*PredictAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredictAllResponse)
	err := c.cc.Invoke(ctx, Predictor_PredictAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PredictorServer is the server API for Predictor service.
// All implementations must embed UnimplementedPredictorServer
// for forward compatibility.
type PredictorServer interface {
	Predict(context.Context, *PredictRequest) (*PredictResponse, error)
	PredictAll(context.Context, *PredictAllRequest) (*PredictAllResponse, error)
	mustEmbedUnimplementedPredictorServer()
}

// UnimplementedPredictorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPredictorServer struct{}

func (UnimplementedPredictorServer) Predict(context.Context, *PredictRequest) (*PredictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedPredictorServer) PredictAll(context.Context, *PredictAllRequest) (*PredictAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictAll not implemented")
}
func (UnimplementedPredictorServer) mustEmbedUnimplementedPredictorServer() {}
func (UnimplementedPredictorServer) testEmbeddedByValue()                   {}

// UnsafePredictorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PredictorServer will
// result in compilation errors.
type UnsafePredictorServer interface {
	mustEmbedUnimplementedPredictorServer()
}

func RegisterPredictorServer(s grpc.ServiceRegistrar, srv PredictorServer) {
	// If the following call pancis, it indicates UnimplementedPredictorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Predictor_ServiceDesc, srv)
}

func _Predictor_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictorServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Predictor_Predict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictorServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Predictor_PredictAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictorServer).PredictAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Predictor_PredictAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictorServer).PredictAll(ctx, req.(*PredictAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Predictor_ServiceDesc is the grpc.ServiceDesc for Predictor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Predictor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "predict.Predictor",
	HandlerType: (*PredictorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _Predictor_Predict_Handler,
		},
		{
			MethodName: "PredictAll",
			Handler:    _Predictor_PredictAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "predict.proto",
}
